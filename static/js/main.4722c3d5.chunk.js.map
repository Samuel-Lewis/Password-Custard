{"version":3,"sources":["components/Footer.tsx","components/About.tsx","components/Header.tsx","components/History.tsx","generator/resources/symbols.ts","generator/utils.ts","generator/transformers/entropy.ts","generator/resources/leet.ts","generator/transformers/number.ts","generator/transformers/upperCase.ts","components/options/Delimiters.tsx","components/options/TitleCase.tsx","components/options/NumberInput.tsx","components/Options.tsx","components/Strength.tsx","components/Password.tsx","generator/generator.ts","generator/transformers/delimiters.ts","generator/transformers/titleCase.ts","generator/transformers/leet.ts","generator/transformers/words.ts","theme.ts","App.tsx","index.tsx"],"names":["PCFooter","Footer","background","justify","pad","Anchor","icon","Github","label","href","AboutPanel","props","onClose","Layer","position","onEsc","onClickOutside","Box","gap","width","flex","direction","Heading","level","margin","Button","Close","onClick","Paragraph","fill","PCHeader","React","useState","aboutOpen","setAboutOpen","Header","Nav","alt","src","process","style","height","hoverIndicator","alignSelf","color","HistoryList","styled","List","History","display","passwords","slice","border","data","symbols","split","alphaLower","alphaUpper","map","a","toUpperCase","digits","allCharacters","shuffleArray","array","i","length","j","Math","floor","random","getTokenIndicies","tokens","flatMap","token","tokenIndex","char","stringIndex","entropy","percent","shuffleIndices","round","forEach","replacement","SecureRNG","GenerateString","join","substr","leetSubstitutes","b","c","d","e","f","g","h","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","number","count","Array","_","GenerateInteger","index","splice","toString","padStart","upperCase","Delimiters","handleFieldChange","value","CheckBoxGroup","name","onChange","event","options","TitleCase","CheckBox","toggle","checked","target","NumberInput","id","min","max","charAt","title","align","RangeInput","Number","Options","field","newState","state","setState","onValueChange","alignContent","this","words","numbers","Grid","columns","delimiters","titleCase","leet","Component","ColouredMeter","Meter","StrengthMeter","score","passwordMeter","checkPass","password","values","type","thickness","size","PasswordField","Password","createNewPassword","newPassword","include","transformers","rword","generate","isArray","concat","filter","replace","txt","toLowerCase","generatePassword","currentPassword","onPasswordGenerated","handleOptionsChange","handleCopy","justCopied","copyTextToClipboard","optionsOpen","Card","CardHeader","CardBody","top","bottom","CardFooter","plain","onMouseOut","Copy","tip","primary","Collapsible","open","globalTheme","deepMerge","grommet","global","font","family","colors","brand","focus","content","BorderHeading","App","history","setHistory","Grommet","theme","full","rows","Main","image","repeat","textAlign","ResetStyles","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4722c3d5.chunk.js","sourcesContent":["import React from \"react\";\nimport { Anchor, Footer } from \"grommet\";\nimport { Github } from \"grommet-icons\";\n\nexport default function PCFooter() {\n  return (\n    <Footer background=\"light-4\" justify=\"center\" pad=\"small\">\n      <Anchor\n        icon={<Github />}\n        label=\"Samuel Lewis\"\n        href=\"https://github.com/Samuel-Lewis\"\n      />\n    </Footer>\n  );\n}\n","import React from \"react\";\nimport { Anchor, Box, Button, Heading, Layer, Paragraph } from \"grommet\";\nimport { Close } from \"grommet-icons\";\n\ntype AboutPanelProps = {\n  onClose: () => void;\n};\n\nexport const AboutPanel: React.FunctionComponent<AboutPanelProps> = (props) => {\n  const { onClose } = props;\n  return (\n    <Layer position=\"center\" onEsc={onClose} onClickOutside={onClose}>\n      <Box pad=\"medium\" gap=\"small\" width=\"1/3\">\n        <Box flex={false} direction=\"row\" justify=\"between\">\n          <Heading level={2} margin=\"none\">\n            About\n          </Heading>\n          <Button icon={<Close />} onClick={onClose} />\n        </Box>\n        <Paragraph fill>\n          Password Custard is a lightweight, client side only, password\n          generator. It draws on long form phrases, for increased security and\n          human consumability (eg, you can kinda remember it and reproduce it).{\" \"}\n          <Anchor href=\"https://xkcd.com/936/\" label=\"Relevant xkcd\" />.\n        </Paragraph>\n        <Heading level={4} margin=\"none\">\n          Attributions\n        </Heading>\n\n        <Paragraph fill>\n          Icon made by{\" \"}\n          <Anchor href=\"https://www.flaticon.com/authors/freepik\">\n            Freepik\n          </Anchor>{\" \"}\n          from <Anchor href=\"https://www.flaticon.com/\">Flaticon</Anchor>.\n        </Paragraph>\n      </Box>\n    </Layer>\n  );\n};\n","import React from \"react\";\nimport { Anchor, Button, Header, Nav } from \"grommet\";\nimport { AboutPanel } from \"./About\";\n\nexport default function PCHeader() {\n  const [aboutOpen, setAboutOpen] = React.useState(false);\n  const onClose = () => {\n    setAboutOpen(false);\n  };\n\n  return (\n    <>\n      {aboutOpen && <AboutPanel onClose={onClose} />}\n      <Header background=\"brand\">\n        <Nav direction=\"row\" gap=\"small\">\n          <Button\n            icon={\n              <img\n                alt=\"\"\n                src={`${process.env.PUBLIC_URL}/logo192.png`}\n                style={{\n                  width: \"24px\",\n                  height: \"24px\",\n                }}\n              />\n            }\n            href={process.env.PUBLIC_URL}\n            hoverIndicator\n          />\n          <Anchor\n            alignSelf=\"center\"\n            label=\"About\"\n            color=\"light-2\"\n            onClick={() => {\n              setAboutOpen(true);\n            }}\n          />\n        </Nav>\n      </Header>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Box, List } from \"grommet\";\nimport styled from \"styled-components\";\n\nconst HISTORY_LENGTH = 10;\n\nconst HistoryList = styled(List)`\n  text-align: center;\n`;\n\ntype HistoryProps = {\n  passwords: string[];\n};\n\nexport const History: React.FunctionComponent<HistoryProps> = (props) => {\n  const display = props.passwords.slice(1, HISTORY_LENGTH);\n\n  return (\n    <Box pad=\"medium\">\n      <HistoryList border={false} pad=\"xsmall\" data={display} />\n    </Box>\n  );\n};\n","// As defined by OWASP https://owasp.org/www-community/password-special-characters\nexport const symbols = ` !\"#$%&'()*+,-./:;<=>?@[\\\\]^_\\`{|}~`.split('');\nexport const alphaLower = `abcdefghijklmnopqrstuvwxyz`.split('');\nexport const alphaUpper = alphaLower.map(a => a.toUpperCase());\nexport const digits = `0123456789`.split('');\nexport const allCharacters = [...symbols, ...alphaLower, ...alphaUpper, ...digits];\n","export const shuffleArray = <T>(array: T[]): T[] => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nexport const getTokenIndicies = (tokens: string[]) => {\n  return tokens.flatMap((token, tokenIndex) =>\n    token\n      .split(\"\")\n      .map((char, stringIndex) => ({ tokenIndex, stringIndex, char }))\n  );\n};\n","import SecureRNG from \"secure-rng\";\nimport { Transformer } from \"../../types\";\nimport { allCharacters } from \"../resources/symbols\";\nimport { getTokenIndicies, shuffleArray } from \"../utils\";\n\nexport const entropy = (percent: number): Transformer => (tokens) => {\n  const shuffleIndices = shuffleArray(getTokenIndicies(tokens));\n  const selectEntropy = shuffleIndices.slice(\n    0,\n    Math.round((percent / 100) * shuffleIndices.length)\n  );\n\n  selectEntropy.forEach(({ tokenIndex, stringIndex }) => {\n    const token = tokens[tokenIndex];\n    const replacement = SecureRNG.GenerateString(1, allCharacters.join(\"\"));\n    tokens[tokenIndex] =\n      token.substr(0, stringIndex) +\n      replacement +\n      token.substr(stringIndex + replacement.length);\n  });\n\n  return tokens;\n};\n","export const leetSubstitutes:  { [key: string]: string[]; } = {\n  a: [\"4\", \"@\", \"^\"],\n  b: [\"8\", \"6\"],\n  c: [\"(\", \"<\", \"{\"],\n  d: [],\n  e: [\"3\", \"&\"],\n  f: [\"}\"],\n  g: [\"6\", \"9\", \"&\"],\n  h: [\"#\"],\n  i: [\"!\", \"1\", \"|\"],\n  j: [\"]\"],\n  k: [\"X\"],\n  l: [\"1\", \"7\", \"|\"],\n  m: [],\n  n: [],\n  o: [\"0\"],\n  p: [\"9\"],\n  q: [\"9\"],\n  r: [\"2\"],\n  s: [\"5\", \"$\", \"z\"],\n  t: [\"7\", \"+\", \"1\"],\n  u: [],\n  v: [],\n  w: [],\n  x: [\"*\", \"%\"],\n  y: [],\n  z: [\"2\", \"%\", \"3\"],\n};\n","import SecureRNG from \"secure-rng\";\nimport { Transformer } from \"../../types\";\n\nexport const number = (count: number): Transformer => (tokens) => {\n  const numbers = new Array<number>(count)\n    .fill(0)\n    .map((_) => SecureRNG.GenerateInteger(0, 9999));\n\n  numbers.forEach((n) => {\n    const index = SecureRNG.GenerateInteger(0, tokens.length);\n    tokens.splice(index, 0, n.toString().padStart(4, \"0\"));\n  });\n\n  return tokens;\n};\n","import { Transformer } from \"../../types\";\nimport { shuffleArray } from \"../utils\";\n\nexport const upperCase = (count: number): Transformer => (tokens) => {\n  const tokenIndices = shuffleArray(tokens.map((_, i) => i)).slice(0, count);\n  tokenIndices.forEach((i) => (tokens[i] = tokens[i].toUpperCase()));\n  return tokens;\n};\n","import React from \"react\";\nimport { Box, CheckBoxGroup, Heading } from \"grommet\";\nimport { HandleFieldChange, PasswordOptions } from \"../../types\";\n\ntype DelimitersProps = {\n  handleFieldChange: HandleFieldChange;\n  value: PasswordOptions[\"delimiters\"];\n};\n\nexport const Delimiters: React.FunctionComponent<DelimitersProps> = (props) => {\n  const { handleFieldChange, value } = props;\n  return (\n    <Box>\n      <Heading level={4}>Delimiters</Heading>\n\n      <CheckBoxGroup\n        name=\"Delimiters\"\n        value={value}\n        // @ts-ignore TODO workout type for `event` ?\n        onChange={(event) => handleFieldChange(\"delimiters\", event.value)}\n        options={[\n          { label: \"Hyphen\", value: \"-\" },\n          { label: \"Underscore\", value: \"_\" },\n          { label: \"Space\", value: \" \" },\n        ]}\n      />\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Box, CheckBox, Heading } from \"grommet\";\nimport { HandleFieldChange, PasswordOptions } from \"../../types\";\n\ntype TitleCaseProps = {\n  handleFieldChange: HandleFieldChange;\n  value: PasswordOptions[\"titleCase\"];\n};\n\nexport const TitleCase: React.FunctionComponent<TitleCaseProps> = (props) => {\n  const { handleFieldChange, value } = props;\n  return (\n    <Box>\n      <CheckBox\n        toggle\n        label={<Heading level={4}>Title Case</Heading>}\n        checked={value}\n        onChange={(event) =>\n          handleFieldChange(\"titleCase\", event.target.checked)\n        }\n      />\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Box, Heading, RangeInput } from \"grommet\";\nimport { HandleFieldChange, PasswordOptions } from \"../../types\";\n\ntype NumberInputProps = {\n  id: keyof PasswordOptions;\n  value: number;\n  handleFieldChange: HandleFieldChange;\n  title?: (value: number) => string;\n  min?: number;\n  max?: number;\n};\n\nexport const NumberInput: React.FunctionComponent<NumberInputProps> = (\n  props\n) => {\n  const { id, value, handleFieldChange, min, max } = props;\n  const name = id.charAt(0).toUpperCase() + id.slice(1);\n  const title = props.title || ((v) => `${name}: ${v}`);\n\n  return (\n    <Box\n      direction=\"row-responsive\"\n      align=\"baseline\"\n      justify=\"between\"\n      margin=\"none\"\n      pad=\"small\"\n    >\n      <Box width=\"small\" pad=\"none\" margin=\"none\">\n        <Heading level={4} margin=\"none\">\n          {title(value)}\n        </Heading>\n      </Box>\n\n      <RangeInput\n        value={value}\n        name={id}\n        min={min || 0}\n        max={max || 100}\n        onChange={(event) => handleFieldChange(id, Number(event.target.value))}\n      />\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Box, Grid } from \"grommet\";\nimport { PasswordOptions } from \"../types\";\nimport { Delimiters } from \"./options/Delimiters\";\nimport { TitleCase } from \"./options/TitleCase\";\nimport { NumberInput } from \"./options/NumberInput\";\n\nexport type OptionsState = PasswordOptions;\ntype OptionsProps = {\n  onValueChange: (newState: OptionsState) => void;\n  options: OptionsState;\n};\n\nexport const getDefaultOptions = (): PasswordOptions => {\n  return {\n    words: 3,\n    numbers: 1,\n    delimiters: [\"-\"],\n    entropy: 5,\n    upperCase: 1,\n    titleCase: true,\n    leet: 5,\n  };\n};\n\nexport class Options extends React.Component<OptionsProps, OptionsState> {\n  constructor(props: OptionsProps) {\n    super(props);\n    this.state = props.options;\n  }\n\n  handleFieldChange = <T extends keyof OptionsState, K extends OptionsState[T]>(\n    field: T,\n    value: K\n  ): void => {\n    const newState = { ...this.state, [field]: value };\n    this.setState(newState);\n    this.props.onValueChange(newState);\n  };\n\n  render() {\n    return (\n      <Box background=\"light-2\" pad=\"medium\" alignContent=\"center\">\n        <NumberInput\n          id=\"words\"\n          value={this.state.words}\n          max={8}\n          handleFieldChange={this.handleFieldChange}\n        />\n        <NumberInput\n          id=\"numbers\"\n          value={this.state.numbers}\n          max={8}\n          handleFieldChange={this.handleFieldChange}\n        />\n        <NumberInput\n          id=\"entropy\"\n          value={this.state.entropy}\n          handleFieldChange={this.handleFieldChange}\n          title={(v) => `Entropy: ${v}%`}\n        />\n\n        <Grid columns={[\"flex\", \"flex\"]} gap=\"medium\">\n          <Delimiters\n            value={this.state.delimiters}\n            handleFieldChange={this.handleFieldChange}\n          />\n          <TitleCase\n            value={this.state.titleCase}\n            handleFieldChange={this.handleFieldChange}\n          />\n          <NumberInput\n            id=\"upperCase\"\n            value={this.state.upperCase}\n            max={this.state.words}\n            handleFieldChange={this.handleFieldChange}\n            title={(v) => `Upper case: ${v}`}\n          />\n          <NumberInput\n            id=\"leet\"\n            value={this.state.leet}\n            handleFieldChange={this.handleFieldChange}\n            title={(v) => `Leet: ${v}%`}\n          />\n        </Grid>\n      </Box>\n    );\n  }\n}\n","import React from \"react\";\nimport { Box, Meter } from \"grommet\";\n// @ts-ignore\nimport passwordMeter from \"passwordmeter\";\nimport styled from \"styled-components\";\n\nconst ColouredMeter = styled(Meter)``;\n\ntype StrengthMeterProps = {\n  password: string;\n};\n\nexport const StrengthMeter: React.FunctionComponent<StrengthMeterProps> = (\n  props\n) => {\n  const score = passwordMeter.checkPass(props.password);\n\n  return (\n    <Box pad=\"none\" margin=\"none\" width=\"stretch\">\n      <ColouredMeter\n        values={[{ value: score }]}\n        type=\"bar\"\n        thickness=\"small\"\n        margin=\"none\"\n        size=\"full\"\n      />\n    </Box>\n  );\n};\n","import React from \"react\";\nimport copyTextToClipboard from \"copy-text-to-clipboard\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Collapsible,\n  Grid,\n  Heading,\n} from \"grommet\";\nimport { Copy } from \"grommet-icons\";\nimport { generatePassword } from \"../generator/generator\";\nimport { getDefaultOptions, Options, OptionsState } from \"./Options\";\n\nimport styled from \"styled-components\";\nimport { StrengthMeter } from \"./Strength\";\n\nconst PasswordField = styled(Heading)`\n  font-family: \"Monaco\";\n  text-align: center;\n  overflow: scroll;\n`;\n\ntype PasswordProps = {\n  onPasswordGenerated?: (newPassword: string) => void;\n};\n\ntype PasswordState = {\n  currentPassword: string;\n  optionsOpen: boolean;\n  options: OptionsState;\n  justCopied: boolean;\n};\n\nexport class Password extends React.Component<PasswordProps, PasswordState> {\n  constructor(props: PasswordProps) {\n    super(props);\n    this.state = {\n      currentPassword: \"\",\n      optionsOpen: false,\n      options: getDefaultOptions(),\n      justCopied: false,\n    };\n  }\n\n  componentDidMount() {\n    this.createNewPassword();\n  }\n\n  createNewPassword = () => {\n    const newPassword = generatePassword(this.state.options);\n    this.setState({ currentPassword: newPassword });\n\n    if (this.props.onPasswordGenerated) {\n      this.props.onPasswordGenerated(newPassword);\n    }\n  };\n\n  handleOptionsChange = (newState: OptionsState) => {\n    this.setState({ options: newState }, () => {\n      this.createNewPassword();\n    });\n  };\n\n  handleCopy = () => {\n    this.setState({ justCopied: true });\n    copyTextToClipboard(this.state.currentPassword);\n  };\n\n  render() {\n    return (\n      <Card>\n        <CardHeader pad=\"medium\" background=\"light-3\">\n          Your new password is...\n        </CardHeader>\n        <CardBody align=\"center\" pad=\"none\" background=\"light-1\">\n          <PasswordField margin={{ top: \"large\", bottom: \"large\" }} level={3}>\n            {this.state.currentPassword}\n          </PasswordField>\n          <StrengthMeter password={this.state.currentPassword} />\n        </CardBody>\n\n        <CardFooter background=\"light-3\">\n          <Grid\n            align=\"center\"\n            fill=\"horizontal\"\n            margin=\"medium\"\n            columns={[\"1/4\", \"1/2\", \"1/4\"]}\n          >\n            <Box align=\"start\">\n              <Button\n                plain={false}\n                onClick={this.handleCopy}\n                onMouseOut={() => {\n                  this.setState({ justCopied: false });\n                }}\n                icon={<Copy size=\"medium\" />}\n                size=\"medium\"\n                tip={this.state.justCopied ? \"Copied!\" : \"Copy to clipboard\"}\n                title=\"Copy to clipboard\"\n                hoverIndicator\n              />\n            </Box>\n            <Button\n              primary\n              label=\"Generate\"\n              size=\"large\"\n              onClick={this.createNewPassword}\n            />\n            <Box align=\"end\">\n              <Button\n                label=\"Options\"\n                size=\"medium\"\n                onClick={() => {\n                  this.setState({ optionsOpen: !this.state.optionsOpen });\n                }}\n              />\n            </Box>\n          </Grid>\n        </CardFooter>\n        <Collapsible open={this.state.optionsOpen} direction=\"vertical\">\n          <Options\n            onValueChange={this.handleOptionsChange}\n            options={this.state.options}\n          />\n        </Collapsible>\n      </Card>\n    );\n  }\n}\n","import { PasswordOptions, Transformer } from \"../types\";\nimport { entropy } from \"./transformers/entropy\";\nimport { delimiters } from \"./transformers/delimiters\";\nimport { leet } from \"./transformers/leet\";\nimport { number } from \"./transformers/number\";\nimport { titleCase } from \"./transformers/titleCase\";\nimport { upperCase } from \"./transformers/upperCase\";\nimport { wordAppender } from \"./transformers/words\";\n\nexport const generatePassword = (options: PasswordOptions): string => {\n  let transformers: Transformer[] = [\n    wordAppender(options.words),\n    leet(options.leet),\n    titleCase(options.titleCase),\n    upperCase(options.upperCase),\n    number(options.numbers),\n    delimiters(options.delimiters),\n    entropy(options.entropy),\n  ];\n\n  let tokens: string[] = [];\n  transformers.forEach((t, i) => {\n    tokens = t(tokens);\n  });\n\n  return tokens.join(\"\");\n};\n","import { Transformer } from \"../../types\";\n\nexport const delimiters = (delimiters: string[]): Transformer => (tokens) => {\n  if (delimiters.length === 0) {\n    return tokens;\n  }\n\n  return tokens.flatMap((value, index, array) => {\n    if (index === array.length - 1) {\n      return value;\n    }\n\n    const delimiter = delimiters[Math.floor(Math.random() * delimiters.length)];\n    return [value, delimiter];\n  });\n};\n","import { Transformer } from \"../../types\";\n\nexport const titleCase = (include: boolean): Transformer => (tokens) => {\n  if (!include) {\n    return tokens;\n  }\n  return tokens.map((token: string) =>\n    token.replace(\n      /\\w\\S*/g,\n      (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n    )\n  );\n};\n","import SecureRNG from \"secure-rng\";\nimport { Transformer } from \"../../types\";\nimport { leetSubstitutes } from \"../resources/leet\";\nimport { getTokenIndicies, shuffleArray } from \"../utils\";\n\nexport const leet = (percent: number): Transformer => (tokens) => {\n  const shuffleIndices = shuffleArray(getTokenIndicies(tokens)).filter(\n    ({ char }) => leetSubstitutes[char].length > 0\n  );\n\n  const selectEntropy = shuffleIndices.slice(\n    0,\n    Math.round((percent / 100) * shuffleIndices.length)\n  );\n\n  selectEntropy.forEach(({ tokenIndex, stringIndex, char }) => {\n    const token = tokens[tokenIndex];\n    const replacement = SecureRNG.GenerateString(\n      1,\n      leetSubstitutes[char].join(\"\")\n    );\n\n    tokens[tokenIndex] =\n      token.substr(0, stringIndex) +\n      replacement +\n      token.substr(stringIndex + replacement.length);\n  });\n\n  return tokens;\n};\n","import { rword } from \"rword\";\nimport { Transformer } from \"../../types\";\n\nexport const wordAppender = (count: number): Transformer => (tokens) => {\n  if (count === 0) {\n    return [];\n  }\n\n  let words = rword.generate(count, { length: \"3-6\" });\n  if (!Array.isArray(words)) {\n    words = [words];\n  }\n\n  return tokens.concat(words);\n};\n","import { grommet } from \"grommet/themes\";\nimport { deepMerge } from \"grommet/utils\";\n\nconst globalTheme = deepMerge(grommet, {\n  global: {\n    font: {\n      family: \"Verdana\",\n    },\n    colors: {\n      brand: \"#5885AF\",\n      focus: \"#41729F\",\n      \"accent-1\": \"#C3E0E5\",\n    },\n  },\n  tip: {\n    content: {\n      background: \"light-1\",\n    },\n  },\n});\n\nexport default globalTheme;\n","import React from \"react\";\nimport { Box, Grid, Grommet, Heading, Main } from \"grommet\";\nimport styled from \"styled-components\";\nimport PCFooter from \"./components/Footer\";\nimport PCHeader from \"./components/Header\";\nimport { History } from \"./components/History\";\nimport { Password } from \"./components/Password\";\nimport theme from \"./theme\";\n\nconst BorderHeading = styled(Heading)`\n  text-transform: uppercase;\n`;\n\nfunction App() {\n  const [history, setHistory] = React.useState([] as string[]);\n\n  const onNewPassword = (newPassword: string) => {\n    setHistory([newPassword, ...history]);\n  };\n\n  return (\n    <Grommet theme={theme} full>\n      <Grid fill rows={[\"auto\", \"flex\", \"auto\"]}>\n        <PCHeader />\n        <Main\n          pad=\"medium\"\n          align=\"center\"\n          background={{\n            image: `url(${process.env.PUBLIC_URL}/bg_pattern.png)`,\n            repeat: \"repeat\",\n            size: \"xsmall\",\n          }}\n        >\n          <Box fill width={{ max: \"large\" }}>\n            <Grid alignContent=\"center\" rows={[\"auto\", \"fill\", \"auto\"]}>\n              <BorderHeading margin=\"medium\" textAlign=\"center\">\n                Password Custard\n              </BorderHeading>\n              <Password onPasswordGenerated={onNewPassword} />\n              <History passwords={history} />\n            </Grid>\n          </Box>\n        </Main>\n        <PCFooter />\n      </Grid>\n    </Grommet>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createGlobalStyle } from \"styled-components\";\n\nconst ResetStyles = createGlobalStyle`\n  html, body {\n    margin: 0;\n    padding: 0;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <ResetStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}