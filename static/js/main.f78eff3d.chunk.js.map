{"version":3,"sources":["components/Footer.tsx","components/About.tsx","components/Header.tsx","generator/utils.ts","generator/resources/symbols.ts","generator/transformers/upperCase.ts","components/options/Delimiters.tsx","components/options/Words.tsx","components/options/Entropy.tsx","components/options/UpperCase.tsx","components/options/TitleCase.tsx","components/Options.tsx","components/Strength.tsx","components/Password.tsx","generator/generator.ts","generator/transformers/entropy.ts","generator/transformers/delimiters.ts","generator/transformers/words.ts","generator/transformers/titleCase.ts","components/History.tsx","theme.ts","App.tsx","index.tsx"],"names":["PCFooter","Footer","background","justify","pad","Anchor","icon","Github","label","href","AboutPanel","props","onClose","Layer","position","onEsc","onClickOutside","Box","gap","width","flex","direction","Heading","level","margin","Button","Close","onClick","Paragraph","fill","PCHeader","useState","aboutOpen","setAboutOpen","Header","Nav","alt","src","process","style","height","hoverIndicator","alignSelf","shuffleArray","array","i","length","j","Math","floor","random","symbols","split","alphaLower","alphaUpper","map","a","toUpperCase","digits","allCharacters","upperCase","count","tokens","_","slice","forEach","Delimiters","handleFieldChange","value","CheckBoxGroup","name","onChange","event","options","Words","RangeInput","min","max","Number","target","Entropy","UpperCase","maxWords","TitleCase","CheckBox","toggle","checked","v","Options","field","newState","state","setState","onValueChange","alignContent","this","words","entropy","delimiters","titleCase","React","Component","ColouredMeter","styled","Meter","StrengthMeter","score","passwordMeter","checkPass","password","values","type","thickness","size","PasswordField","Password","createNewPassword","newPassword","percent","transformers","rword","generate","Array","isArray","concat","token","replace","txt","charAt","substr","toLowerCase","flatMap","index","shuffleIndices","tokenIndex","stringIndex","getTokenIndicies","round","replacement","SecureRNG","GenerateString","join","t","generatePassword","currentPassword","onPasswordGenerated","handleOptionsChange","handleCopy","justCopied","copyTextToClipboard","optionsOpen","Card","CardHeader","CardBody","align","top","bottom","CardFooter","Grid","columns","plain","onMouseOut","Copy","tip","title","primary","Collapsible","open","HistoryList","List","History","display","passwords","border","data","globalTheme","deepMerge","grommet","global","font","family","colors","brand","focus","content","BorderHeading","App","history","setHistory","Grommet","theme","full","rows","Main","image","repeat","textAlign","ResetStyles","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f78eff3d.chunk.js","sourcesContent":["import { Anchor, Footer } from \"grommet\";\nimport { Github } from \"grommet-icons\";\nimport React from \"react\";\n\nexport default function PCFooter() {\n  return (\n    <Footer background=\"light-4\" justify=\"center\" pad=\"small\">\n      <Anchor\n        icon={<Github />}\n        label=\"Samuel Lewis\"\n        href=\"https://github.com/Samuel-Lewis\"\n      />\n    </Footer>\n  );\n}\n","import { Anchor, Box, Button, Heading, Layer, Paragraph } from \"grommet\";\nimport { Close } from \"grommet-icons\";\nimport React from \"react\";\n\ntype AboutPanelProps = {\n  onClose: () => void;\n};\n\nexport const AboutPanel: React.FunctionComponent<AboutPanelProps> = (props) => {\n  const { onClose } = props;\n  return (\n    <Layer position=\"center\" onEsc={onClose} onClickOutside={onClose}>\n      <Box pad=\"medium\" gap=\"small\" width=\"1/3\">\n        <Box flex={false} direction=\"row\" justify=\"between\">\n          <Heading level={2} margin=\"none\">\n            About\n          </Heading>\n          <Button icon={<Close />} onClick={onClose} />\n        </Box>\n        <Paragraph fill>\n          Password Custard is a lightweight, client side only, password\n          generator. It draws on long form phrases, for increased security and\n          human consumability (eg, you can kinda remember it and reproduce it).{\" \"}\n          <Anchor href=\"https://xkcd.com/936/\" label=\"Relevant xkcd\" />.\n        </Paragraph>\n        <Heading level={4} margin=\"none\">\n          Attributions\n        </Heading>\n\n        <Paragraph fill>\n          Icon made by{\" \"}\n          <Anchor href=\"https://www.flaticon.com/authors/freepik\">\n            Freepik\n          </Anchor>{\" \"}\n          from <Anchor href=\"https://www.flaticon.com/\">Flaticon</Anchor>.\n        </Paragraph>\n      </Box>\n    </Layer>\n  );\n};\n","import { Anchor, Button, Header, Nav } from \"grommet\";\nimport React, { useState } from \"react\";\nimport { AboutPanel } from \"./About\";\n\nexport default function PCHeader() {\n  const [aboutOpen, setAboutOpen] = useState(false);\n  const onClose = () => {\n    setAboutOpen(false);\n  };\n\n  return (\n    <>\n      {aboutOpen && <AboutPanel onClose={onClose} />}\n      <Header background=\"brand\">\n        <Nav direction=\"row\" gap=\"small\">\n          <Button\n            icon={\n              <img\n                alt=\"\"\n                src={`${process.env.PUBLIC_URL}/logo192.png`}\n                style={{\n                  width: \"24px\",\n                  height: \"24px\",\n                }}\n              />\n            }\n            href={process.env.PUBLIC_URL}\n            hoverIndicator\n          />\n          <Anchor\n            alignSelf=\"center\"\n            label=\"About\"\n            onClick={() => {\n              setAboutOpen(true);\n            }}\n          />\n        </Nav>\n      </Header>\n    </>\n  );\n}\n","export const shuffleArray = <T>(array: T[]): T[] => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nexport const getTokenIndicies = (tokens: string[]) => {\n  return tokens.flatMap((token, tokenIndex) =>\n    token.split(\"\").map((_, stringIndex) => ({ tokenIndex, stringIndex }))\n  );\n};\n","\n// As defined by OWASP https://owasp.org/www-community/password-special-characters\nexport const symbols = ` !\"#$%&'()*+,-./:;<=>?@[\\\\]^_\\`{|}~`.split('');\nexport const alphaLower = `abcdefghijklmnopqrstuvwxyz`.split('');\nexport const alphaUpper = alphaLower.map(a => a.toUpperCase());\nexport const digits = `0123456789`.split('');\nexport const allCharacters = [...symbols, ...alphaLower, ...alphaUpper, ...digits];\n","import { Transformer } from \"../../types\";\nimport { shuffleArray } from \"../utils\";\n\nexport const upperCase = (count: number): Transformer => (tokens) => {\n  const tokenIndices = shuffleArray(tokens.map((_, i) => i)).slice(0, count);\n  tokenIndices.forEach((i) => (tokens[i] = tokens[i].toUpperCase()));\n  return tokens;\n};\n","import { Box, CheckBoxGroup, Heading } from \"grommet\";\nimport React from \"react\";\nimport { HandleFieldChange, PasswordOptions } from \"../../types\";\n\ntype DelimitersProps = {\n  handleFieldChange: HandleFieldChange;\n  value: PasswordOptions[\"delimiters\"];\n};\n\nexport const Delimiters: React.FunctionComponent<DelimitersProps> = (props) => {\n  const { handleFieldChange, value } = props;\n  return (\n    <Box>\n      <Heading level={4} margin=\"small\">\n        Delimiters\n      </Heading>\n\n      <CheckBoxGroup\n        name=\"Delimiters\"\n        value={value}\n        // @ts-ignore TODO workout type for `event`\n        onChange={(event) => handleFieldChange(\"delimiters\", event.value)}\n        options={[\n          { label: \"Hyphen\", value: \"-\" },\n          { label: \"Underscore\", value: \"_\" },\n          { label: \"Space\", value: \" \" },\n        ]}\n      />\n    </Box>\n  );\n};\n","import { Box, Heading, RangeInput } from \"grommet\";\nimport React from \"react\";\nimport { HandleFieldChange, PasswordOptions } from \"../../types\";\n\ntype WordsProps = {\n  handleFieldChange: HandleFieldChange;\n  value: PasswordOptions[\"words\"];\n};\n\nexport const Words: React.FunctionComponent<WordsProps> = (props) => {\n  const { handleFieldChange, value } = props;\n  return (\n    <Box>\n      <Heading level={4} margin=\"small\">\n        Words: {value}\n      </Heading>\n\n      <RangeInput\n        value={value}\n        min={1}\n        max={8}\n        // @ts-ignore\n        onChange={(event) =>\n          handleFieldChange(\"words\", Number(event.target.value))\n        }\n      />\n    </Box>\n  );\n};\n","import { Box, Heading, RangeInput } from \"grommet\";\nimport React from \"react\";\nimport { HandleFieldChange, PasswordOptions } from \"../../types\";\n\ntype EntropyProps = {\n  handleFieldChange: HandleFieldChange;\n  value: PasswordOptions[\"entropy\"];\n};\n\nexport const Entropy: React.FunctionComponent<EntropyProps> = (props) => {\n  const { handleFieldChange, value } = props;\n  return (\n    <Box>\n      <Heading level={4} margin=\"small\">\n        Entropy: {value}%\n      </Heading>\n\n      <RangeInput\n        value={value}\n        min={0}\n        max={100}\n        // @ts-ignore\n        onChange={(event) =>\n          handleFieldChange(\"entropy\", Number(event.target.value))\n        }\n      />\n    </Box>\n  );\n};\n","import { Box, Heading, RangeInput } from \"grommet\";\nimport React from \"react\";\nimport { HandleFieldChange, PasswordOptions } from \"../../types\";\n\ntype UpperCaseProps = {\n  handleFieldChange: HandleFieldChange;\n  value: PasswordOptions[\"upperCase\"];\n  maxWords: number;\n};\n\nexport const UpperCase: React.FunctionComponent<UpperCaseProps> = (props) => {\n  const { handleFieldChange, value, maxWords } = props;\n  return (\n    <Box>\n      <Heading level={4} margin=\"small\">\n        Upper Case: {value} word{value === 1 ? \"\" : \"s\"}\n      </Heading>\n\n      <RangeInput\n        value={value}\n        min={0}\n        max={maxWords}\n        // @ts-ignore\n        onChange={(event) =>\n          handleFieldChange(\"upperCase\", Number(event.target.value))\n        }\n      />\n    </Box>\n  );\n};\n","import { Box, Heading, CheckBox } from \"grommet\";\nimport React from \"react\";\nimport { HandleFieldChange, PasswordOptions } from \"../../types\";\n\ntype TitleCaseProps = {\n  handleFieldChange: HandleFieldChange;\n  value: PasswordOptions[\"titleCase\"];\n};\n\nexport const TitleCase: React.FunctionComponent<TitleCaseProps> = (props) => {\n  const { handleFieldChange, value } = props;\n  return (\n    <Box direction=\"row\">\n      <Heading level={4} margin=\"small\">\n        Title Case\n      </Heading>\n\n      <CheckBox\n        toggle\n        checked={value}\n        onChange={(v) => {\n          handleFieldChange(\"titleCase\", v.target.checked);\n        }}\n      />\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Box, Grid, ResponsiveContext } from \"grommet\";\nimport { PasswordOptions } from \"../types\";\nimport { Delimiters } from \"./options/Delimiters\";\nimport { Words } from \"./options/Words\";\nimport { Entropy } from \"./options/Entropy\";\nimport { UpperCase } from \"./options/UpperCase\";\nimport { TitleCase } from \"./options/TitleCase\";\n\nexport type OptionsState = PasswordOptions;\ntype OptionsProps = {\n  onValueChange: (newState: OptionsState) => void;\n  options: OptionsState;\n};\n\nexport const getDefaultOptions = (): PasswordOptions => {\n  return {\n    words: 3,\n    delimiters: [\"-\"],\n    entropy: 5,\n    upperCase: 1,\n    titleCase: true,\n  };\n};\n\nexport class Options extends React.Component<OptionsProps, OptionsState> {\n  constructor(props: OptionsProps) {\n    super(props);\n    this.state = props.options;\n  }\n\n  handleFieldChange = <T extends keyof OptionsState, K extends OptionsState[T]>(\n    field: T,\n    value: K\n  ): void => {\n    const newState = { ...this.state, [field]: value };\n    this.setState(newState);\n    this.props.onValueChange(newState);\n  };\n\n  render() {\n    return (\n      <Box background=\"light-2\" pad=\"medium\" alignContent=\"center\">\n        <Words\n          value={this.state.words}\n          handleFieldChange={this.handleFieldChange}\n        />\n        <Entropy\n          value={this.state.entropy}\n          handleFieldChange={this.handleFieldChange}\n        />\n        <UpperCase\n          value={this.state.upperCase}\n          handleFieldChange={this.handleFieldChange}\n          maxWords={this.state.words}\n        />\n        <Delimiters\n          value={this.state.delimiters}\n          handleFieldChange={this.handleFieldChange}\n        />\n        <TitleCase\n          value={this.state.titleCase}\n          handleFieldChange={this.handleFieldChange}\n        />\n      </Box>\n    );\n  }\n}\n","import React from \"react\";\nimport { Box, Meter } from \"grommet\";\nimport styled from \"styled-components\";\n// @ts-ignore\nimport passwordMeter from \"passwordmeter\";\n\nconst ColouredMeter = styled(Meter)``;\n\ntype StrengthMeterProps = {\n  password: string;\n};\n\nexport const StrengthMeter: React.FunctionComponent<StrengthMeterProps> = (\n  props\n) => {\n  const score = passwordMeter.checkPass(props.password);\n\n  return (\n    <Box pad=\"none\" margin=\"none\" width=\"stretch\">\n      <ColouredMeter\n        values={[{ value: score }]}\n        type=\"bar\"\n        thickness=\"small\"\n        margin=\"none\"\n        size=\"full\"\n      />\n    </Box>\n  );\n};\n","import {\n  Box,\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Collapsible,\n  Grid,\n  Heading,\n} from \"grommet\";\nimport React from \"react\";\nimport { generatePassword } from \"../generator/generator\";\nimport { getDefaultOptions, Options, OptionsState } from \"./Options\";\nimport { Copy } from \"grommet-icons\";\nimport copyTextToClipboard from \"copy-text-to-clipboard\";\n\nimport styled from \"styled-components\";\nimport { StrengthMeter } from \"./Strength\";\n\nconst PasswordField = styled(Heading)`\n  font-family: \"Monaco\";\n  text-align: center;\n  overflow: scroll;\n`;\n\ntype PasswordProps = {\n  onPasswordGenerated?: (newPassword: string) => void;\n};\n\ntype PasswordState = {\n  currentPassword: string;\n  optionsOpen: boolean;\n  options: OptionsState;\n  justCopied: boolean;\n};\n\nexport class Password extends React.Component<PasswordProps, PasswordState> {\n  constructor(props: PasswordProps) {\n    super(props);\n    this.state = {\n      currentPassword: \"\",\n      optionsOpen: false,\n      options: getDefaultOptions(),\n      justCopied: false,\n    };\n  }\n\n  componentDidMount() {\n    this.createNewPassword();\n  }\n\n  createNewPassword = () => {\n    const newPassword = generatePassword(this.state.options);\n    this.setState({ currentPassword: newPassword });\n\n    if (this.props.onPasswordGenerated) {\n      this.props.onPasswordGenerated(newPassword);\n    }\n  };\n\n  handleOptionsChange = (newState: OptionsState) => {\n    this.setState({ options: newState }, () => {\n      this.createNewPassword();\n    });\n  };\n\n  handleCopy = () => {\n    this.setState({ justCopied: true });\n    copyTextToClipboard(this.state.currentPassword);\n  };\n\n  render() {\n    return (\n      <Card>\n        <CardHeader pad=\"medium\" background=\"light-3\">\n          Your new password is...\n        </CardHeader>\n        <CardBody align=\"center\" pad=\"none\" background=\"light-1\">\n          <PasswordField margin={{ top: \"large\", bottom: \"large\" }} level={3}>\n            {this.state.currentPassword}\n          </PasswordField>\n          <StrengthMeter password={this.state.currentPassword} />\n        </CardBody>\n\n        <CardFooter background=\"light-3\">\n          <Grid\n            align=\"center\"\n            fill=\"horizontal\"\n            margin=\"medium\"\n            columns={[\"1/4\", \"1/2\", \"1/4\"]}\n          >\n            <Box align=\"start\">\n              <Button\n                plain={false}\n                onClick={this.handleCopy}\n                onMouseOut={() => {\n                  this.setState({ justCopied: false });\n                }}\n                icon={<Copy size=\"medium\" />}\n                size=\"medium\"\n                tip={this.state.justCopied ? \"Copied!\" : \"Copy to clipboard\"}\n                title={\"Copy to clipboard\"}\n                hoverIndicator\n              />\n            </Box>\n            <Button\n              primary\n              label=\"Generate\"\n              size=\"large\"\n              onClick={this.createNewPassword}\n            />\n            <Box align=\"end\">\n              <Button\n                label=\"Options\"\n                size=\"medium\"\n                onClick={() => {\n                  this.setState({ optionsOpen: !this.state.optionsOpen });\n                }}\n              />\n            </Box>\n          </Grid>\n        </CardFooter>\n        <Collapsible open={this.state.optionsOpen} direction={\"vertical\"}>\n          <Options\n            onValueChange={this.handleOptionsChange}\n            options={this.state.options}\n          />\n        </Collapsible>\n      </Card>\n    );\n  }\n}\n","import { PasswordOptions, Transformer } from \"../types\";\nimport { wordAppender } from \"./transformers/words\";\nimport { delimiters } from \"./transformers/delimiters\";\nimport { entropy } from \"./transformers/entropy\";\nimport { upperCase } from \"./transformers/upperCase\";\nimport { titleCase } from \"./transformers/titleCase\";\n\nexport const generatePassword = (options: PasswordOptions): string => {\n  let transformers: Transformer[] = [\n    wordAppender(options.words),\n    titleCase(),\n    upperCase(options.upperCase),\n    delimiters(options.delimiters),\n    entropy(options.entropy),\n  ];\n\n  let tokens: string[] = [];\n  transformers.forEach((t) => {\n    tokens = t(tokens);\n  });\n\n  return tokens.join(\"\");\n};\n","import { Transformer } from \"../../types\";\nimport SecureRNG from \"secure-rng\";\nimport { getTokenIndicies, shuffleArray } from \"../utils\";\nimport { allCharacters } from \"../resources/symbols\";\n\nexport const entropy = (percent: number): Transformer => (tokens) => {\n  const shuffleIndices = shuffleArray(getTokenIndicies(tokens));\n  const selectEntropy = shuffleIndices.slice(\n    0,\n    Math.round((percent / 100) * shuffleIndices.length)\n  );\n\n  selectEntropy.forEach(({ tokenIndex, stringIndex }) => {\n    const token = tokens[tokenIndex];\n    const replacement = SecureRNG.GenerateString(1, allCharacters.join(\"\"));\n    tokens[tokenIndex] =\n      token.substr(0, stringIndex) +\n      replacement +\n      token.substr(stringIndex + replacement.length);\n  });\n\n  return tokens;\n};\n","import { Transformer } from \"../../types\";\n\nexport const delimiters = (delimiters: string[]): Transformer => (tokens) => {\n  if (delimiters.length === 0) {\n    return tokens;\n  }\n\n  return tokens.flatMap((value, index, array) => {\n    if (index === array.length - 1) {\n      return value;\n    }\n\n    const delimiter = delimiters[Math.floor(Math.random() * delimiters.length)];\n    return [value, delimiter];\n  });\n};\n","import { Transformer } from \"../../types\";\nimport { rword } from \"rword\";\n\nexport const wordAppender = (count: number): Transformer => (tokens) => {\n  let words = rword.generate(count, { length: \"3-6\" });\n  if (!Array.isArray(words)) {\n    words = [words];\n  }\n\n  return tokens.concat(words);\n};\n","import { Transformer } from \"../../types\";\n\nexport const titleCase = (): Transformer => (tokens) => {\n  return tokens.map((token: string) =>\n    token.replace(\n      /\\w\\S*/g,\n      (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n    )\n  );\n};\n","import React from \"react\";\nimport { Box, List } from \"grommet\";\nimport styled from \"styled-components\";\n\nconst HISTORY_LENGTH = 10;\n\nconst HistoryList = styled(List)`\n  text-align: center;\n`;\n\ntype HistoryProps = {\n  passwords: string[];\n};\n\nexport const History: React.FunctionComponent<HistoryProps> = (props) => {\n  const display = props.passwords.slice(1, HISTORY_LENGTH);\n\n  return (\n    <Box pad=\"medium\">\n      <HistoryList border={false} pad=\"xsmall\" data={display} />\n    </Box>\n  );\n};\n","import { grommet } from \"grommet/themes\";\nimport { deepMerge } from \"grommet/utils\";\n\nconst globalTheme = deepMerge(grommet, {\n  global: {\n    font: {\n      family: \"Verdana\",\n    },\n    colors: {\n      brand: \"#5885AF\",\n      focus: \"#41729F\",\n      \"accent-1\": \"#C3E0E5\",\n    },\n  },\n  tip: {\n    content: {\n      background: \"light-1\",\n    },\n  },\n});\n\nexport default globalTheme;\n","import React, { useState } from \"react\";\nimport { Box, Grid, Grommet, Heading, Main } from \"grommet\";\nimport PCFooter from \"./components/Footer\";\nimport PCHeader from \"./components/Header\";\nimport { Password } from \"./components/Password\";\nimport { History } from \"./components/History\";\nimport theme from \"./theme\";\nimport styled from \"styled-components\";\n\nconst BorderHeading = styled(Heading)`\n  text-transform: uppercase;\n`;\n\nfunction App() {\n  const [history, setHistory] = useState([] as string[]);\n\n  const onNewPassword = (newPassword: string) => {\n    setHistory([newPassword, ...history]);\n  };\n\n  return (\n    <Grommet theme={theme} full>\n      <Grid fill rows={[\"auto\", \"flex\", \"auto\"]}>\n        <PCHeader />\n        <Main\n          pad=\"medium\"\n          align=\"center\"\n          background={{\n            image: `url(${process.env.PUBLIC_URL}/bg_pattern.png)`,\n            repeat: \"repeat\",\n            size: \"xsmall\",\n          }}\n        >\n          <Box fill width={{ max: \"large\" }}>\n            <Grid alignContent=\"center\" rows={[\"auto\", \"fill\", \"auto\"]}>\n              <BorderHeading margin=\"medium\" textAlign=\"center\">\n                Password Custard\n              </BorderHeading>\n              <Password onPasswordGenerated={onNewPassword} />\n              <History passwords={history} />\n            </Grid>\n          </Box>\n        </Main>\n        <PCFooter />\n      </Grid>\n    </Grommet>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createGlobalStyle } from \"styled-components\";\n\nconst ResetStyles = createGlobalStyle`\n  html, body {\n    margin: 0;\n    padding: 0;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <ResetStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}