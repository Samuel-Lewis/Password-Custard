{"version":3,"sources":["generator/resources/symbols.ts","generator/utils.ts","generator/transformers/entropy.ts","generator/resources/leet.ts","generator/transformers/number.ts","generator/transformers/upperCase.ts","generator/generator.ts","generator/transformers/delimiters.ts","generator/transformers/titleCase.ts","generator/transformers/leet.ts","generator/transformers/words.ts"],"names":["symbols","split","alphaLower","alphaUpper","map","a","toUpperCase","digits","allCharacters","shuffleArray","array","i","length","j","Math","floor","random","getTokenIndicies","tokens","flatMap","token","tokenIndex","char","stringIndex","entropy","percent","shuffleIndices","slice","round","forEach","replacement","SecureRNG","GenerateString","join","substr","leetSubstitutes","b","c","d","e","f","g","h","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","number","count","Array","fill","_","GenerateInteger","index","splice","toString","padStart","upperCase","generatePassword","options","delimiters","include","transformers","words","rword","generate","isArray","concat","leet","filter","titleCase","replace","txt","charAt","toLowerCase","numbers","value"],"mappings":"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","file":"static/js/4.9dc33029.chunk.js","sourcesContent":["// As defined by OWASP https://owasp.org/www-community/password-special-characters\nexport const symbols = ` !\"#$%&'()*+,-./:;<=>?@[\\\\]^_\\`{|}~`.split('');\nexport const alphaLower = `abcdefghijklmnopqrstuvwxyz`.split('');\nexport const alphaUpper = alphaLower.map(a => a.toUpperCase());\nexport const digits = `0123456789`.split('');\nexport const allCharacters = [...symbols, ...alphaLower, ...alphaUpper, ...digits];\n","export const shuffleArray = <T>(array: T[]): T[] => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nexport const getTokenIndicies = (tokens: string[]) => {\n  return tokens.flatMap((token, tokenIndex) =>\n    token\n      .split(\"\")\n      .map((char, stringIndex) => ({ tokenIndex, stringIndex, char }))\n  );\n};\n","import SecureRNG from \"secure-rng\";\nimport { Transformer } from \"../../types\";\nimport { allCharacters } from \"../resources/symbols\";\nimport { getTokenIndicies, shuffleArray } from \"../utils\";\n\nexport const entropy = (percent: number): Transformer => (tokens) => {\n  const shuffleIndices = shuffleArray(getTokenIndicies(tokens));\n  const selectEntropy = shuffleIndices.slice(\n    0,\n    Math.round((percent / 100) * shuffleIndices.length)\n  );\n\n  selectEntropy.forEach(({ tokenIndex, stringIndex }) => {\n    const token = tokens[tokenIndex];\n    const replacement = SecureRNG.GenerateString(1, allCharacters.join(\"\"));\n    tokens[tokenIndex] =\n      token.substr(0, stringIndex) +\n      replacement +\n      token.substr(stringIndex + replacement.length);\n  });\n\n  return tokens;\n};\n","export const leetSubstitutes:  { [key: string]: string[]; } = {\n  a: [\"4\", \"@\", \"^\"],\n  b: [\"8\", \"6\"],\n  c: [\"(\", \"<\", \"{\"],\n  d: [],\n  e: [\"3\", \"&\"],\n  f: [\"}\"],\n  g: [\"6\", \"9\", \"&\"],\n  h: [\"#\"],\n  i: [\"!\", \"1\", \"|\"],\n  j: [\"]\"],\n  k: [\"X\"],\n  l: [\"1\", \"7\", \"|\"],\n  m: [],\n  n: [],\n  o: [\"0\"],\n  p: [\"9\"],\n  q: [\"9\"],\n  r: [\"2\"],\n  s: [\"5\", \"$\", \"z\"],\n  t: [\"7\", \"+\", \"1\"],\n  u: [],\n  v: [],\n  w: [],\n  x: [\"*\", \"%\"],\n  y: [],\n  z: [\"2\", \"%\", \"3\"],\n};\n","import SecureRNG from \"secure-rng\";\nimport { Transformer } from \"../../types\";\n\nexport const number = (count: number): Transformer => (tokens) => {\n  const numbers = new Array<number>(count)\n    .fill(0)\n    .map((_) => SecureRNG.GenerateInteger(0, 9999));\n\n  numbers.forEach((n) => {\n    const index = SecureRNG.GenerateInteger(0, tokens.length);\n    tokens.splice(index, 0, n.toString().padStart(4, \"0\"));\n  });\n\n  return tokens;\n};\n","import { Transformer } from \"../../types\";\nimport { shuffleArray } from \"../utils\";\n\nexport const upperCase = (count: number): Transformer => (tokens) => {\n  const tokenIndices = shuffleArray(tokens.map((_, i) => i)).slice(0, count);\n  tokenIndices.forEach((i) => (tokens[i] = tokens[i].toUpperCase()));\n  return tokens;\n};\n","import { PasswordOptions, Transformer } from \"../types\";\nimport { entropy } from \"./transformers/entropy\";\nimport { delimiters } from \"./transformers/delimiters\";\nimport { leet } from \"./transformers/leet\";\nimport { number } from \"./transformers/number\";\nimport { titleCase } from \"./transformers/titleCase\";\nimport { upperCase } from \"./transformers/upperCase\";\nimport { wordAppender } from \"./transformers/words\";\n\nexport const generatePassword = (options: PasswordOptions): string => {\n  let transformers: Transformer[] = [\n    wordAppender(options.words),\n    leet(options.leet),\n    titleCase(options.titleCase),\n    upperCase(options.upperCase),\n    number(options.numbers),\n    delimiters(options.delimiters),\n    entropy(options.entropy),\n  ];\n\n  let tokens: string[] = [];\n  transformers.forEach((t, i) => {\n    tokens = t(tokens);\n  });\n\n  return tokens.join(\"\");\n};\n","import { Transformer } from \"../../types\";\n\nexport const delimiters = (delimiters: string[]): Transformer => (tokens) => {\n  if (delimiters.length === 0) {\n    return tokens;\n  }\n\n  return tokens.flatMap((value, index, array) => {\n    if (index === array.length - 1) {\n      return value;\n    }\n\n    const delimiter = delimiters[Math.floor(Math.random() * delimiters.length)];\n    return [value, delimiter];\n  });\n};\n","import { Transformer } from \"../../types\";\n\nexport const titleCase = (include: boolean): Transformer => (tokens) => {\n  if (!include) {\n    return tokens;\n  }\n  return tokens.map((token: string) =>\n    token.replace(\n      /\\w\\S*/g,\n      (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n    )\n  );\n};\n","import SecureRNG from \"secure-rng\";\nimport { Transformer } from \"../../types\";\nimport { leetSubstitutes } from \"../resources/leet\";\nimport { getTokenIndicies, shuffleArray } from \"../utils\";\n\nexport const leet = (percent: number): Transformer => (tokens) => {\n  const shuffleIndices = shuffleArray(getTokenIndicies(tokens)).filter(\n    ({ char }) => leetSubstitutes[char].length > 0\n  );\n\n  const selectEntropy = shuffleIndices.slice(\n    0,\n    Math.round((percent / 100) * shuffleIndices.length)\n  );\n\n  selectEntropy.forEach(({ tokenIndex, stringIndex, char }) => {\n    const token = tokens[tokenIndex];\n    const replacement = SecureRNG.GenerateString(\n      1,\n      leetSubstitutes[char].join(\"\")\n    );\n\n    tokens[tokenIndex] =\n      token.substr(0, stringIndex) +\n      replacement +\n      token.substr(stringIndex + replacement.length);\n  });\n\n  return tokens;\n};\n","import { rword } from \"rword\";\nimport { Transformer } from \"../../types\";\n\nexport const wordAppender = (count: number): Transformer => (tokens) => {\n  if (count === 0) {\n    return [];\n  }\n\n  let words = rword.generate(count, { length: \"3-6\" });\n  if (!Array.isArray(words)) {\n    words = [words];\n  }\n\n  return tokens.concat(words);\n};\n"],"sourceRoot":""}