{"version":3,"sources":["components/Footer.tsx","components/About.tsx","components/Header.tsx","components/History.tsx","components/options/Delimiters.tsx","components/options/TitleCase.tsx","components/options/NumberInput.tsx","components/Options.tsx","components/Password.tsx","theme.ts","App.tsx","index.tsx"],"names":["PCFooter","Footer","background","justify","pad","Anchor","icon","Github","label","href","AboutPanel","props","onClose","Layer","position","onEsc","onClickOutside","Box","gap","width","flex","direction","Heading","level","margin","Button","Close","onClick","Paragraph","fill","PCHeader","React","useState","aboutOpen","setAboutOpen","Header","Nav","alt","src","process","style","height","hoverIndicator","alignSelf","color","HistoryList","styled","List","History","display","passwords","slice","border","data","Delimiters","handleFieldChange","value","CheckBoxGroup","name","onChange","event","options","TitleCase","CheckBox","toggle","checked","target","NumberInput","handleFieldChangeDebounced","debounce","id","onChangeCallback","v","Number","setState","tempValue","state","this","min","max","title","charAt","toUpperCase","finalTitle","align","RangeInput","Component","Options","onFieldChange","useCallback","field","alignContent","words","numbers","entropy","Grid","columns","delimiters","titleCase","upperCase","leet","PasswordField","Password","createNewPassword","generatorFunc","newPassword","currentPassword","onPasswordGenerated","handleOptionsChange","console","log","newOptions","handleCopy","justCopied","copyTextToClipboard","optionsOpen","then","generatePassword","Card","CardHeader","CardBody","top","bottom","CardFooter","plain","onMouseOut","Copy","size","tip","primary","Collapsible","open","globalTheme","deepMerge","grommet","global","font","family","colors","brand","focus","content","BorderHeading","App","history","setHistory","Grommet","theme","full","rows","Main","image","repeat","textAlign","ResetStyles","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd80eec9.chunk.js","sourcesContent":["import React from \"react\";\nimport { Anchor, Footer } from \"grommet\";\nimport { Github } from \"grommet-icons\";\n\nexport default function PCFooter() {\n  return (\n    <Footer background=\"light-4\" justify=\"center\" pad=\"small\">\n      <Anchor\n        icon={<Github />}\n        label=\"Samuel Lewis\"\n        href=\"https://github.com/Samuel-Lewis\"\n      />\n    </Footer>\n  );\n}\n","import React from \"react\";\nimport { Anchor, Box, Button, Heading, Layer, Paragraph } from \"grommet\";\nimport { Close } from \"grommet-icons\";\n\ntype AboutPanelProps = {\n  onClose: () => void;\n};\n\nexport const AboutPanel: React.FunctionComponent<AboutPanelProps> = (props) => {\n  const { onClose } = props;\n  return (\n    <Layer position=\"center\" onEsc={onClose} onClickOutside={onClose}>\n      <Box pad=\"medium\" gap=\"small\" width=\"1/3\">\n        <Box flex={false} direction=\"row\" justify=\"between\">\n          <Heading level={2} margin=\"none\">\n            About\n          </Heading>\n          <Button icon={<Close />} onClick={onClose} />\n        </Box>\n        <Paragraph fill>\n          Password Custard is a lightweight, client side only, password\n          generator. It draws on long form phrases, for increased security and\n          human consumability (eg, you can kinda remember it and reproduce it).{\" \"}\n          <Anchor href=\"https://xkcd.com/936/\" label=\"Relevant xkcd\" />.\n        </Paragraph>\n        <Heading level={4} margin=\"none\">\n          Attributions\n        </Heading>\n\n        <Paragraph fill>\n          Icon made by{\" \"}\n          <Anchor href=\"https://www.flaticon.com/authors/freepik\">\n            Freepik\n          </Anchor>{\" \"}\n          from <Anchor href=\"https://www.flaticon.com/\">Flaticon</Anchor>.\n        </Paragraph>\n      </Box>\n    </Layer>\n  );\n};\n","import React from \"react\";\nimport { Anchor, Button, Header, Nav } from \"grommet\";\nimport { AboutPanel } from \"./About\";\n\nexport default function PCHeader() {\n  const [aboutOpen, setAboutOpen] = React.useState(false);\n  const onClose = () => {\n    setAboutOpen(false);\n  };\n\n  return (\n    <>\n      {aboutOpen && <AboutPanel onClose={onClose} />}\n      <Header background=\"brand\">\n        <Nav direction=\"row\" gap=\"small\">\n          <Button\n            icon={\n              <img\n                alt=\"\"\n                src={`${process.env.PUBLIC_URL}/logo192.png`}\n                style={{\n                  width: \"24px\",\n                  height: \"24px\",\n                }}\n              />\n            }\n            href={process.env.PUBLIC_URL}\n            hoverIndicator\n          />\n          <Anchor\n            alignSelf=\"center\"\n            label=\"About\"\n            color=\"light-2\"\n            onClick={() => {\n              setAboutOpen(true);\n            }}\n          />\n        </Nav>\n      </Header>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Box, List } from \"grommet\";\nimport styled from \"styled-components\";\n\nconst HISTORY_LENGTH = 10;\n\nconst HistoryList = styled(List)`\n  text-align: center;\n`;\n\ntype HistoryProps = {\n  passwords: string[];\n};\n\nexport const History: React.FunctionComponent<HistoryProps> = (props) => {\n  const display = props.passwords.slice(1, HISTORY_LENGTH);\n\n  return (\n    <Box pad=\"medium\">\n      <HistoryList border={false} pad=\"xsmall\" data={display} />\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Box, CheckBoxGroup, Heading } from \"grommet\";\nimport { HandleFieldChange, PasswordOptions } from \"../../types\";\n\ntype DelimitersProps = {\n  handleFieldChange: HandleFieldChange;\n  value: PasswordOptions[\"delimiters\"];\n};\n\nexport const Delimiters: React.FunctionComponent<DelimitersProps> = (props) => {\n  const { handleFieldChange, value } = props;\n  return (\n    <Box>\n      <Heading level={4}>Delimiters</Heading>\n\n      <CheckBoxGroup\n        name=\"Delimiters\"\n        value={value}\n        // @ts-ignore TODO workout type for `event` ?\n        onChange={(event) => handleFieldChange(\"delimiters\", event.value)}\n        options={[\n          { label: \"Hyphen\", value: \"-\" },\n          { label: \"Underscore\", value: \"_\" },\n          { label: \"Space\", value: \" \" },\n        ]}\n      />\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Box, CheckBox, Heading } from \"grommet\";\nimport { HandleFieldChange, PasswordOptions } from \"../../types\";\n\ntype TitleCaseProps = {\n  handleFieldChange: HandleFieldChange;\n  value: PasswordOptions[\"titleCase\"];\n};\n\nexport const TitleCase: React.FunctionComponent<TitleCaseProps> = (props) => {\n  const { handleFieldChange, value } = props;\n  return (\n    <Box>\n      <CheckBox\n        toggle\n        label={<Heading level={4}>Title Case</Heading>}\n        checked={value}\n        onChange={(event) =>\n          handleFieldChange(\"titleCase\", event.target.checked)\n        }\n      />\n    </Box>\n  );\n};\n","import React from \"react\";\nimport debounce from \"lodash.debounce\";\nimport { Box, Heading, RangeInput } from \"grommet\";\nimport { HandleFieldChange, PasswordOptions } from \"../../types\";\n\ntype NumberInputProps = {\n  id: keyof PasswordOptions;\n  value: number;\n  handleFieldChange: HandleFieldChange;\n  title?: (value: number) => string;\n  min?: number;\n  max?: number;\n};\n\ntype NumberInputState = {\n  tempValue: number;\n};\n\nexport class NumberInput extends React.Component<\n  NumberInputProps,\n  NumberInputState\n> {\n  constructor(props: NumberInputProps) {\n    super(props);\n    this.state = {\n      tempValue: props.value,\n    };\n  }\n\n  handleFieldChangeDebounced = debounce(\n    (value: number) => this.props.handleFieldChange(this.props.id, value),\n    200\n  );\n\n  onChangeCallback = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const v = Number(event.target.value);\n    this.setState({ tempValue: v });\n    this.handleFieldChangeDebounced(v);\n  };\n\n  render() {\n    const { id, min, max, title } = this.props;\n    const name = id.charAt(0).toUpperCase() + id.slice(1);\n    const finalTitle = title || ((v) => `${name}: ${v}`);\n\n    return (\n      <Box\n        direction=\"row-responsive\"\n        align=\"baseline\"\n        justify=\"between\"\n        margin=\"none\"\n        pad=\"small\"\n      >\n        <Box width=\"small\" pad=\"none\" margin=\"none\">\n          <Heading level={4} margin=\"none\">\n            {finalTitle(this.state.tempValue)}\n          </Heading>\n        </Box>\n\n        <RangeInput\n          value={this.state.tempValue}\n          name={id}\n          min={min || 0}\n          max={max || 100}\n          onChange={this.onChangeCallback}\n        />\n      </Box>\n    );\n  }\n}\n","import React from \"react\";\nimport { Box, Grid } from \"grommet\";\nimport { HandleFieldChange, PasswordOptions } from \"../types\";\nimport { Delimiters } from \"./options/Delimiters\";\nimport { TitleCase } from \"./options/TitleCase\";\nimport { NumberInput } from \"./options/NumberInput\";\n\ntype OptionsProps = {\n  onFieldChange: HandleFieldChange;\n  options: PasswordOptions;\n};\n\nexport const getDefaultOptions = (): PasswordOptions => {\n  return {\n    words: 3,\n    numbers: 1,\n    delimiters: [\"-\"],\n    entropy: 5,\n    upperCase: 1,\n    titleCase: true,\n    leet: 5,\n  };\n};\n\nexport const Options: React.FunctionComponent<OptionsProps> = (props) => {\n  const { onFieldChange } = props;\n  const handleFieldChange = React.useCallback(\n    (field, value) => {\n      onFieldChange(field, value);\n    },\n    [onFieldChange]\n  );\n\n  return (\n    <Box background=\"light-2\" pad=\"medium\" alignContent=\"center\">\n      <NumberInput\n        id=\"words\"\n        value={props.options.words}\n        max={8}\n        handleFieldChange={handleFieldChange}\n      />\n      <NumberInput\n        id=\"numbers\"\n        value={props.options.numbers}\n        max={8}\n        handleFieldChange={handleFieldChange}\n      />\n      <NumberInput\n        id=\"entropy\"\n        value={props.options.entropy}\n        handleFieldChange={handleFieldChange}\n        title={(v) => `Entropy: ${v}%`}\n      />\n\n      <Grid columns={[\"flex\", \"flex\"]} gap=\"medium\">\n        <Delimiters\n          value={props.options.delimiters}\n          handleFieldChange={handleFieldChange}\n        />\n        <TitleCase\n          value={props.options.titleCase}\n          handleFieldChange={handleFieldChange}\n        />\n        <NumberInput\n          id=\"upperCase\"\n          value={props.options.upperCase}\n          max={props.options.words}\n          handleFieldChange={handleFieldChange}\n          title={(v) => `Upper case: ${v}`}\n        />\n        <NumberInput\n          id=\"leet\"\n          value={props.options.leet}\n          handleFieldChange={handleFieldChange}\n          title={(v) => `Leet: ${v}%`}\n        />\n      </Grid>\n    </Box>\n  );\n};\n","import React from \"react\";\nimport copyTextToClipboard from \"copy-text-to-clipboard\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Collapsible,\n  Grid,\n  Heading,\n} from \"grommet\";\nimport { Copy } from \"grommet-icons\";\nimport styled from \"styled-components\";\nimport { getDefaultOptions, Options } from \"./Options\";\nimport { HandleFieldChange, PasswordOptions } from \"../types\";\n\nconst PasswordField = styled(Heading)`\n  font-family: \"Monaco\";\n  text-align: center;\n  overflow: scroll;\n`;\n\ntype PasswordProps = {\n  onPasswordGenerated?: (newPassword: string) => void;\n};\n\ntype PasswordState = {\n  currentPassword: string;\n  optionsOpen: boolean;\n  options: PasswordOptions;\n  justCopied: boolean;\n  generatorFunc?: (options: PasswordOptions) => string;\n};\n\nexport class Password extends React.Component<PasswordProps, PasswordState> {\n  constructor(props: PasswordProps) {\n    super(props);\n    this.state = {\n      currentPassword: \"\",\n      optionsOpen: false,\n      options: getDefaultOptions(),\n      justCopied: false,\n    };\n  }\n\n  componentDidMount() {\n    import(\"../generator/generator\").then(({ generatePassword }) => {\n      this.setState({ generatorFunc: generatePassword }, () => {\n        this.createNewPassword();\n      });\n    });\n  }\n\n  createNewPassword = () => {\n    const { generatorFunc, options } = this.state;\n\n    if (!generatorFunc) {\n      return \"\";\n    }\n\n    const newPassword = generatorFunc(options); //generatePassword(this.state.options);\n    this.setState({ currentPassword: newPassword });\n\n    if (this.props.onPasswordGenerated) {\n      this.props.onPasswordGenerated(newPassword);\n    }\n  };\n\n  handleOptionsChange: HandleFieldChange = (field, value) => {\n    console.log(\"handleOptionsChange\", { field, value });\n    const newOptions = {\n      ...this.state.options,\n      [field]: value,\n    };\n\n    this.setState({ options: newOptions }, () => {\n      this.createNewPassword();\n    });\n  };\n\n  handleCopy = () => {\n    this.setState({ justCopied: true });\n    copyTextToClipboard(this.state.currentPassword);\n  };\n\n  render() {\n    return (\n      <Card>\n        <CardHeader pad=\"medium\" background=\"light-3\">\n          Your new password is...\n        </CardHeader>\n        <CardBody align=\"center\" pad=\"none\" background=\"light-1\">\n          <PasswordField margin={{ top: \"large\", bottom: \"large\" }} level={3}>\n            {this.state.generatorFunc\n              ? this.state.currentPassword\n              : \"Loading dictionary...\"}\n          </PasswordField>\n        </CardBody>\n\n        <CardFooter background=\"light-3\">\n          <Grid\n            align=\"center\"\n            fill=\"horizontal\"\n            margin=\"medium\"\n            columns={[\"1/4\", \"1/2\", \"1/4\"]}\n          >\n            <Box align=\"start\">\n              <Button\n                plain={false}\n                onClick={this.handleCopy}\n                onMouseOut={() => {\n                  this.setState({ justCopied: false });\n                }}\n                icon={<Copy size=\"medium\" />}\n                size=\"medium\"\n                tip={this.state.justCopied ? \"Copied!\" : \"Copy to clipboard\"}\n                title=\"Copy to clipboard\"\n                hoverIndicator\n              />\n            </Box>\n            <Button\n              primary\n              label=\"Generate\"\n              size=\"large\"\n              onClick={this.createNewPassword}\n            />\n            <Box align=\"end\">\n              <Button\n                label=\"Options\"\n                size=\"medium\"\n                onClick={() => {\n                  this.setState({ optionsOpen: !this.state.optionsOpen });\n                }}\n              />\n            </Box>\n          </Grid>\n        </CardFooter>\n        <Collapsible open={this.state.optionsOpen} direction=\"vertical\">\n          <Options\n            onFieldChange={this.handleOptionsChange}\n            options={this.state.options}\n          />\n        </Collapsible>\n      </Card>\n    );\n  }\n}\n","import { grommet } from \"grommet/themes\";\nimport { deepMerge } from \"grommet/utils\";\n\nconst globalTheme = deepMerge(grommet, {\n  global: {\n    font: {\n      family: \"Verdana\",\n    },\n    colors: {\n      brand: \"#5885AF\",\n      focus: \"#41729F\",\n      \"accent-1\": \"#C3E0E5\",\n    },\n  },\n  tip: {\n    content: {\n      background: \"light-1\",\n    },\n  },\n});\n\nexport default globalTheme;\n","import React from \"react\";\nimport { Box, Grid, Grommet, Heading, Main } from \"grommet\";\nimport styled from \"styled-components\";\nimport PCFooter from \"./components/Footer\";\nimport PCHeader from \"./components/Header\";\nimport { History } from \"./components/History\";\nimport { Password } from \"./components/Password\";\nimport theme from \"./theme\";\n\nconst BorderHeading = styled(Heading)`\n  text-transform: uppercase;\n`;\n\nfunction App() {\n  const [history, setHistory] = React.useState([] as string[]);\n\n  const onNewPassword = (newPassword: string) => {\n    setHistory([newPassword, ...history]);\n  };\n\n  return (\n    <Grommet theme={theme} full>\n      <Grid fill rows={[\"auto\", \"flex\", \"auto\"]}>\n        <PCHeader />\n        <Main\n          pad=\"medium\"\n          align=\"center\"\n          background={{\n            image: `url(${process.env.PUBLIC_URL}/bg_pattern.png)`,\n            repeat: \"repeat\",\n            size: \"xsmall\",\n          }}\n        >\n          <Box fill width={{ max: \"large\" }}>\n            <Grid alignContent=\"center\" rows={[\"auto\", \"fill\", \"auto\"]}>\n              <BorderHeading margin=\"medium\" textAlign=\"center\">\n                Password Custard\n              </BorderHeading>\n              <Password onPasswordGenerated={onNewPassword} />\n              <History passwords={history} />\n            </Grid>\n          </Box>\n        </Main>\n        <PCFooter />\n      </Grid>\n    </Grommet>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createGlobalStyle } from \"styled-components\";\n\nconst ResetStyles = createGlobalStyle`\n  html, body {\n    margin: 0;\n    padding: 0;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <ResetStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}