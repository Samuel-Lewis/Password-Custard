{"version":3,"sources":["components/Footer.tsx","components/About.tsx","components/Header.tsx","components/History.tsx","components/options/Delimiters.tsx","components/options/TitleCase.tsx","components/options/NumberInput.tsx","components/Options.tsx","components/Password.tsx","theme.ts","App.tsx","index.tsx"],"names":["PCFooter","Footer","justify","pad","Anchor","icon","Github","label","href","AboutPanel","props","onClose","Layer","position","onEsc","onClickOutside","Box","gap","width","flex","direction","align","alt","src","process","style","height","Heading","level","Button","Close","onClick","margin","Paragraph","fill","rel","target","Header","React","useState","aboutOpen","setAboutOpen","startTheme","localStorage","getItem","darkMode","setDarkMode","onCloseCallback","useCallback","themeChangeCallback","newThemeMode","onThemeChange","setItem","background","hoverIndicator","alignSelf","color","Sun","Moon","tip","HistoryList","styled","List","History","display","passwords","slice","border","data","Delimiters","handleFieldChange","value","CheckBoxGroup","name","onChange","event","options","TitleCase","CheckBox","toggle","checked","NumberInput","id","min","max","charAt","toUpperCase","title","v","RangeInput","undefined","Number","getDefaultOptions","local","JSON","parse","words","numbers","delimiters","entropy","upperCase","titleCase","leet","Options","onFieldChange","field","alignContent","Grid","columns","PasswordField","Password","createNewPassword","state","generatorFunc","newPassword","setState","currentPassword","onPasswordGenerated","writeToLocal","stringify","handleOptionsChange","newOptions","handleCopy","justCopied","copyTextToClipboard","optionsOpen","then","generatePassword","Card","elevation","CardHeader","CardBody","top","bottom","this","CardFooter","plain","onMouseOut","Copy","size","primary","Collapsible","open","Component","genTheme","deepMerge","grommet","defaultMode","global","colors","brand","dark","light","text","control","focus","font","family","active","hover","selected","layer","content","BorderHeading","App","history","setHistory","theme","setTheme","Grommet","full","themeMode","rows","Main","image","repeat","textAlign","ResetStyles","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b452eb0.chunk.js","sourcesContent":["import React from \"react\";\nimport { Anchor, Footer } from \"grommet\";\nimport { Github } from \"grommet-icons\";\n\nexport default function PCFooter() {\n  return (\n    <Footer justify=\"center\" pad=\"small\">\n      <Anchor\n        icon={<Github />}\n        label=\"Samuel Lewis\"\n        href=\"https://github.com/Samuel-Lewis\"\n      />\n    </Footer>\n  );\n}\n","import React from \"react\";\nimport { Anchor, Box, Button, Heading, Layer, Paragraph } from \"grommet\";\nimport { Close } from \"grommet-icons\";\n\ntype AboutPanelProps = {\n  onClose: () => void;\n};\n\nexport const AboutPanel: React.FunctionComponent<AboutPanelProps> = (props) => {\n  const { onClose } = props;\n  return (\n    <Layer position=\"center\" onEsc={onClose} onClickOutside={onClose}>\n      <Box pad=\"medium\" gap=\"small\" width=\"1/3\">\n        <Box flex={false} direction=\"row\" justify=\"between\">\n          <Box direction=\"row\" align=\"center\" gap=\"small\">\n            <img\n              alt=\"\"\n              src={`${process.env.PUBLIC_URL}/logo192.png`}\n              style={{\n                width: \"32px\",\n                height: \"32px\",\n              }}\n            />\n            <Heading level={2}>Password Custard</Heading>\n          </Box>\n          <Button icon={<Close />} onClick={onClose} />\n        </Box>\n        <Heading level={3} margin=\"none\">\n          About\n        </Heading>\n        <Paragraph fill>\n          Password Custard is a client side only password generator. It draws on\n          long form phrases, for increased security and human consumability (eg,\n          you can kinda remember it and reproduce it).{\" \"}\n          <Anchor\n            href=\"https://xkcd.com/936/\"\n            label=\"Relevant xkcd\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          />\n          .\n        </Paragraph>\n\n        <Heading level={3} margin=\"none\">\n          Attributions\n        </Heading>\n        <Paragraph fill>\n          Icon made by{\" \"}\n          <Anchor\n            href=\"https://www.flaticon.com/authors/freepik\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Freepik\n          </Anchor>{\" \"}\n          from{\" \"}\n          <Anchor\n            href=\"https://www.flaticon.com/\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Flaticon\n          </Anchor>\n        </Paragraph>\n      </Box>\n    </Layer>\n  );\n};\n","import React from \"react\";\nimport { Anchor, Box, Button, Header as GHeader } from \"grommet\";\nimport { Moon, Sun } from \"grommet-icons\";\nimport { AboutPanel } from \"./About\";\nimport { ThemeMode } from \"../types\";\n\ntype HeaderProps = {\n  onThemeChange: (theme: ThemeMode) => void;\n};\n\nexport const Header: React.FunctionComponent<HeaderProps> = (props) => {\n  const [aboutOpen, setAboutOpen] = React.useState(false);\n\n  const startTheme = localStorage.getItem(\"themeMode\") === \"dark\";\n  const [darkMode, setDarkMode] = React.useState(startTheme);\n\n  const onCloseCallback = React.useCallback(() => {\n    setAboutOpen(false);\n  }, []);\n\n  const themeChangeCallback = React.useCallback(() => {\n    setDarkMode(!darkMode);\n    const newThemeMode = !darkMode ? \"dark\" : \"light\";\n    props.onThemeChange(newThemeMode);\n    localStorage.setItem(\"themeMode\", newThemeMode);\n  }, [darkMode, props]);\n\n  return (\n    <>\n      {aboutOpen && <AboutPanel onClose={onCloseCallback} />}\n      <GHeader background=\"brand\">\n        <Box direction=\"row\" gap=\"small\">\n          <Button\n            icon={\n              <img\n                alt=\"\"\n                src={`${process.env.PUBLIC_URL}/logo192.png`}\n                style={{\n                  width: \"24px\",\n                  height: \"24px\",\n                }}\n              />\n            }\n            href={process.env.PUBLIC_URL}\n            hoverIndicator\n          />\n          <Anchor\n            alignSelf=\"center\"\n            label=\"About\"\n            color=\"text\"\n            onClick={() => setAboutOpen(true)}\n          />\n        </Box>\n\n        <Button\n          onClick={themeChangeCallback}\n          icon={darkMode ? <Sun color=\"text\" /> : <Moon color=\"text\" />}\n          hoverIndicator\n          tip={`Switch to ${darkMode ? \"light\" : \"dark\"} mode`}\n        />\n      </GHeader>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Box, List } from \"grommet\";\nimport styled from \"styled-components\";\n\nconst HISTORY_LENGTH = 10;\n\nconst HistoryList = styled(List)`\n  text-align: center;\n`;\n\ntype HistoryProps = {\n  passwords: string[];\n};\n\nexport const History: React.FunctionComponent<HistoryProps> = (props) => {\n  const display = props.passwords.slice(1, HISTORY_LENGTH);\n\n  return (\n    <Box pad=\"medium\">\n      <HistoryList border={false} pad=\"xsmall\" data={display} />\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Box, CheckBoxGroup, Heading } from \"grommet\";\nimport { HandleFieldChange, PasswordOptions } from \"../../types\";\n\ntype DelimitersProps = {\n  handleFieldChange: HandleFieldChange;\n  value: PasswordOptions[\"delimiters\"];\n};\n\nexport const Delimiters: React.FunctionComponent<DelimitersProps> = (props) => {\n  const { handleFieldChange, value } = props;\n  return (\n    <Box>\n      <Heading level={4}>Delimiters</Heading>\n\n      <CheckBoxGroup\n        name=\"Delimiters\"\n        value={value}\n        // @ts-ignore TODO workout type for `event` ?\n        onChange={(event) => handleFieldChange(\"delimiters\", event.value)}\n        options={[\n          { label: \"Hyphen\", value: \"-\" },\n          { label: \"Underscore\", value: \"_\" },\n          { label: \"Space\", value: \" \" },\n        ]}\n      />\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Box, CheckBox, Heading } from \"grommet\";\nimport { HandleFieldChange, PasswordOptions } from \"../../types\";\n\ntype TitleCaseProps = {\n  handleFieldChange: HandleFieldChange;\n  value: PasswordOptions[\"titleCase\"];\n};\n\nexport const TitleCase: React.FunctionComponent<TitleCaseProps> = (props) => {\n  const { handleFieldChange, value } = props;\n  return (\n    <Box>\n      <CheckBox\n        toggle\n        label={<Heading level={4}>Title Case</Heading>}\n        checked={value}\n        onChange={(event) =>\n          handleFieldChange(\"titleCase\", event.target.checked)\n        }\n      />\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Box, Heading, RangeInput } from \"grommet\";\nimport { HandleFieldChange, PasswordOptions } from \"../../types\";\n\ntype NumberInputProps = {\n  id: keyof PasswordOptions;\n  value: number;\n  handleFieldChange: HandleFieldChange;\n  title?: (value: number) => string;\n  min?: number;\n  max?: number;\n};\n\nexport const NumberInput: React.FunctionComponent<NumberInputProps> = (\n  props\n) => {\n  const { id, value, handleFieldChange, min, max } = props;\n  const name = id.charAt(0).toUpperCase() + id.slice(1);\n  const title = props.title || ((v) => `${name}: ${v}`);\n\n  return (\n    <Box\n      direction=\"row-responsive\"\n      align=\"baseline\"\n      justify=\"between\"\n      margin=\"none\"\n      pad=\"small\"\n    >\n      <Box width=\"small\" pad=\"none\" margin=\"none\">\n        <Heading level={4} margin=\"none\">\n          {title(value)}\n        </Heading>\n      </Box>\n\n      <RangeInput\n        value={value}\n        name={id}\n        min={min !== undefined ? min : 0}\n        max={max !== undefined ? max : 100}\n        onChange={(event) => handleFieldChange(id, Number(event.target.value))}\n      />\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Box, Grid } from \"grommet\";\nimport { HandleFieldChange, PasswordOptions } from \"../types\";\nimport { Delimiters } from \"./options/Delimiters\";\nimport { TitleCase } from \"./options/TitleCase\";\nimport { NumberInput } from \"./options/NumberInput\";\n\ntype OptionsProps = {\n  onFieldChange: HandleFieldChange;\n  options: PasswordOptions;\n};\n\nexport const getDefaultOptions = (): PasswordOptions => {\n  const local = localStorage.getItem(\"passwordOptions\");\n  if (local) {\n    return JSON.parse(local);\n  }\n\n  return {\n    words: 3,\n    numbers: 1,\n    delimiters: [\"-\"],\n    entropy: 5,\n    upperCase: 1,\n    titleCase: true,\n    leet: 5,\n  };\n};\n\nexport const Options: React.FunctionComponent<OptionsProps> = (props) => {\n  const { onFieldChange } = props;\n  const handleFieldChange = React.useCallback(\n    (field, value) => {\n      onFieldChange(field, value);\n    },\n    [onFieldChange]\n  );\n\n  return (\n    <Box background=\"background-back\" pad=\"medium\" alignContent=\"center\">\n      <NumberInput\n        id=\"words\"\n        value={props.options.words}\n        max={8}\n        handleFieldChange={handleFieldChange}\n      />\n      <NumberInput\n        id=\"numbers\"\n        value={props.options.numbers}\n        max={8}\n        handleFieldChange={handleFieldChange}\n      />\n      <NumberInput\n        id=\"entropy\"\n        value={props.options.entropy}\n        handleFieldChange={handleFieldChange}\n        title={(v) => `Entropy: ${v}%`}\n      />\n\n      <Grid columns={[\"flex\", \"flex\"]} gap=\"medium\">\n        <Delimiters\n          value={props.options.delimiters}\n          handleFieldChange={handleFieldChange}\n        />\n        <TitleCase\n          value={props.options.titleCase}\n          handleFieldChange={handleFieldChange}\n        />\n        <NumberInput\n          id=\"upperCase\"\n          value={props.options.upperCase}\n          max={props.options.words}\n          handleFieldChange={handleFieldChange}\n          title={(v) => `Upper case: ${v}`}\n        />\n        <NumberInput\n          id=\"leet\"\n          value={props.options.leet}\n          handleFieldChange={handleFieldChange}\n          title={(v) => `Leet: ${v}%`}\n        />\n      </Grid>\n    </Box>\n  );\n};\n","import React from \"react\";\nimport copyTextToClipboard from \"copy-text-to-clipboard\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Collapsible,\n  Grid,\n  Heading,\n} from \"grommet\";\nimport { Copy } from \"grommet-icons\";\nimport styled from \"styled-components\";\nimport { getDefaultOptions, Options } from \"./Options\";\nimport { HandleFieldChange, PasswordOptions } from \"../types\";\n\nconst PasswordField = styled(Heading)`\n  font-family: \"Monaco\";\n  text-align: center;\n  overflow: scroll;\n`;\n\ntype PasswordProps = {\n  onPasswordGenerated?: (newPassword: string) => void;\n};\n\ntype PasswordState = {\n  currentPassword: string;\n  optionsOpen: boolean;\n  options: PasswordOptions;\n  justCopied: boolean;\n  generatorFunc?: (options: PasswordOptions) => string;\n};\n\nexport class Password extends React.Component<PasswordProps, PasswordState> {\n  constructor(props: PasswordProps) {\n    super(props);\n    this.state = {\n      currentPassword: \"\",\n      optionsOpen: false,\n      options: getDefaultOptions(),\n      justCopied: false,\n    };\n  }\n\n  componentDidMount() {\n    import(\"../generator/generator\").then(({ generatePassword }) => {\n      this.setState({ generatorFunc: generatePassword }, () => {\n        this.createNewPassword();\n      });\n    });\n  }\n\n  createNewPassword = () => {\n    const { generatorFunc, options } = this.state;\n\n    if (!generatorFunc) {\n      return \"\";\n    }\n\n    const newPassword = generatorFunc(options); //generatePassword(this.state.options);\n    this.setState({ currentPassword: newPassword });\n\n    if (this.props.onPasswordGenerated) {\n      this.props.onPasswordGenerated(newPassword);\n    }\n  };\n\n  writeToLocal = () => {\n    localStorage.setItem(\"passwordOptions\", JSON.stringify(this.state.options));\n  };\n\n  handleOptionsChange: HandleFieldChange = (field, value) => {\n    const newOptions = {\n      ...this.state.options,\n      [field]: value,\n    };\n\n    this.setState({ options: newOptions }, () => {\n      this.createNewPassword();\n      this.writeToLocal();\n    });\n  };\n\n  handleCopy = () => {\n    this.setState({ justCopied: true });\n    copyTextToClipboard(this.state.currentPassword);\n  };\n\n  render() {\n    return (\n      <Card elevation=\"none\" border>\n        <CardHeader pad=\"medium\" background=\"background-back\">\n          Your new password is...\n        </CardHeader>\n        <CardBody align=\"center\" pad=\"none\" background=\"background-front\">\n          <PasswordField margin={{ top: \"large\", bottom: \"large\" }} level={3}>\n            {this.state.generatorFunc\n              ? this.state.currentPassword\n              : \"Loading dictionary...\"}\n          </PasswordField>\n        </CardBody>\n\n        <CardFooter background=\"background-back\">\n          <Grid\n            align=\"center\"\n            fill=\"horizontal\"\n            margin=\"medium\"\n            columns={[\"1/4\", \"1/2\", \"1/4\"]}\n          >\n            <Box align=\"start\">\n              <Button\n                plain={false}\n                onClick={this.handleCopy}\n                onMouseOut={() => {\n                  this.setState({ justCopied: false });\n                }}\n                icon={<Copy size=\"medium\" />}\n                size=\"medium\"\n                tip={this.state.justCopied ? \"Copied!\" : \"Copy to clipboard\"}\n                title=\"Copy to clipboard\"\n                hoverIndicator\n              />\n            </Box>\n            <Button\n              primary\n              label=\"Generate\"\n              size=\"large\"\n              onClick={this.createNewPassword}\n            />\n            <Box align=\"end\">\n              <Button\n                label=\"Options\"\n                size=\"medium\"\n                onClick={() => {\n                  this.setState({ optionsOpen: !this.state.optionsOpen });\n                }}\n              />\n            </Box>\n          </Grid>\n        </CardFooter>\n        <Collapsible open={this.state.optionsOpen} direction=\"vertical\">\n          <Options\n            onFieldChange={this.handleOptionsChange}\n            options={this.state.options}\n          />\n        </Collapsible>\n      </Card>\n    );\n  }\n}\n","import { grommet } from \"grommet/themes\";\nimport { deepMerge } from \"grommet/utils\";\n\n// https://colors.eva.design/\nconst colors = {\n  neutral100: \"#E3E8F4\",\n  neutral200: \"#CAD2E9\",\n  neutral300: \"#98A1BF\",\n  neutral400: \"#5F6680\",\n  neutral500: \"#1D202C\",\n  neutral600: \"#151825\",\n  neutral700: \"#0E111F\",\n  neutral800: \"#090B19\",\n  neutral900: \"#050715\",\n  neutralT100: \"rgba(29, 32, 44, 0.08)\",\n  neutralT200: \"rgba(29, 32, 44, 0.16)\",\n  neutralT300: \"rgba(29, 32, 44, 0.24)\",\n  neutralT400: \"rgba(29, 32, 44, 0.32)\",\n  neutralT500: \"rgba(29, 32, 44, 0.4)\",\n  neutralT600: \"rgba(29, 32, 44, 0.48)\",\n  brand100: \"#FEEFD5\",\n  brand200: \"#FEDCAC\",\n  brand300: \"#FDC283\",\n  brand400: \"#FBAA64\",\n  brand500: \"#FA8231\",\n  brand600: \"#D76123\",\n  brand700: \"#B34518\",\n  brand800: \"#902D0F\",\n  brand900: \"#771C09\",\n  brandT100: \"rgba(250, 130, 49, 0.08)\",\n  brandT200: \"rgba(250, 130, 49, 0.16)\",\n  brandT300: \"rgba(250, 130, 49, 0.24)\",\n  brandT400: \"rgba(250, 130, 49, 0.32)\",\n  brandT500: \"rgba(250, 130, 49, 0.4)\",\n  brandT600: \"rgba(250, 130, 49, 0.48)\",\n  green100: \"#F2FDDD\",\n  green200: \"#E1FBBB\",\n  green300: \"#C9F397\",\n  green400: \"#AFE77A\",\n  green500: \"#8BD850\",\n  green600: \"#6AB93A\",\n  green700: \"#4D9B28\",\n  green800: \"#347D19\",\n  green900: \"#21670F\",\n  greenT100: \"rgba(139, 216, 80, 0.08)\",\n  greenT200: \"rgba(139, 216, 80, 0.16)\",\n  greenT300: \"rgba(139, 216, 80, 0.24)\",\n  greenT400: \"rgba(139, 216, 80, 0.32)\",\n  greenT500: \"rgba(139, 216, 80, 0.4)\",\n  greenT600: \"rgba(139, 216, 80, 0.48)\",\n  blue100: \"#DAF0FF\",\n  blue200: \"#B5DEFF\",\n  blue300: \"#90C9FF\",\n  blue400: \"#75B6FF\",\n  blue500: \"#4796FF\",\n  blue600: \"#3374DB\",\n  blue700: \"#2356B7\",\n  blue800: \"#163C93\",\n  blue900: \"#0D297A\",\n  blueT100: \"rgba(71, 150, 255, 0.08)\",\n  blueT200: \"rgba(71, 150, 255, 0.16)\",\n  blueT300: \"rgba(71, 150, 255, 0.24)\",\n  blueT400: \"rgba(71, 150, 255, 0.32)\",\n  blueT500: \"rgba(71, 150, 255, 0.4)\",\n  blueT600: \"rgba(71, 150, 255, 0.48)\",\n  yellow100: \"#FEF7CD\",\n  yellow200: \"#FEEE9B\",\n  yellow300: \"#FDE269\",\n  yellow400: \"#FBD544\",\n  yellow500: \"#F9C107\",\n  yellow600: \"#D6A005\",\n  yellow700: \"#B38203\",\n  yellow800: \"#906502\",\n  yellow900: \"#775001\",\n  yellowT100: \"rgba(249, 193, 7, 0.08)\",\n  yellowT200: \"rgba(249, 193, 7, 0.16)\",\n  yellowT300: \"rgba(249, 193, 7, 0.24)\",\n  yellowT400: \"rgba(249, 193, 7, 0.32)\",\n  yellowT500: \"rgba(249, 193, 7, 0.4)\",\n  yellowT600: \"rgba(249, 193, 7, 0.48)\",\n  red100: \"#FFEBDB\",\n  red200: \"#FFD1B7\",\n  red300: \"#FFB293\",\n  red400: \"#FF9578\",\n  red500: \"#FF644C\",\n  red600: \"#DB4037\",\n  red700: \"#B72629\",\n  red800: \"#931824\",\n  red900: \"#7A0E22\",\n  redT100: \"rgba(255, 100, 76, 0.08)\",\n  redT200: \"rgba(255, 100, 76, 0.16)\",\n  redT300: \"rgba(255, 100, 76, 0.24)\",\n  redT400: \"rgba(255, 100, 76, 0.32)\",\n  redT500: \"rgba(255, 100, 76, 0.4)\",\n  redT600: \"rgba(255, 100, 76, 0.48)\",\n};\n\n/**\n * Brand: Actions, buttons, links\n * Foreground: Text and headings\n * Background: Backgrounds\n */\n\nexport const genTheme = deepMerge(grommet, {\n  defaultMode: \"light\",\n  global: {\n    colors: {\n      brand: \"#FA8231\",\n      background: {\n        dark: \"#111111\",\n        light: \"#FFFFFF\",\n      },\n      \"background-back\": {\n        dark: \"#111111\",\n        light: \"#EEEEEE\",\n      },\n      \"background-front\": {\n        dark: \"#222222\",\n        light: \"#FFFFFF\",\n      },\n      \"background-contrast\": {\n        dark: \"#FFFFFF11\",\n        light: \"#11111111\",\n      },\n      text: {\n        light: \"#090B19\",\n        dark: \"#E3E8F4\",\n      },\n      \"text-strong\": {\n        dark: \"text\",\n        light: \"#050715\",\n      },\n      \"text-weak\": {\n        dark: \"text\",\n        light: \"text\",\n      },\n      \"text-xweak\": {\n        dark: \"text\",\n        light: \"text\",\n      },\n      border: {\n        dark: \"#CAD2E9\",\n        light: \"#5F6680\",\n      },\n      control: {\n        light: \"brand\",\n        dark: \"brand\",\n      },\n      \"active-background\": \"background-contrast\",\n      \"active-text\": \"text-strong\",\n      \"selected-background\": \"brand\",\n      \"selected-text\": \"text-strong\",\n      \"status-critical\": {\n        light: \"#FF644C\",\n        dark: \"#B72629\",\n      },\n      \"status-warning\": {\n        light: \"#FBD544\",\n        dark: \"#D6A005\",\n      },\n      \"status-ok\": {\n        light: \"#8BD850\",\n        dark: \"#4D9B28\",\n      },\n      \"status-unknown\": {\n        light: \"#CAD2E9\",\n        dark: \"#1D202C\",\n      },\n      \"status-disabled\": {\n        light: \"#4796FF\",\n        dark: \"#2356B7\",\n      },\n      focus: {\n        light: \"#4796FF\",\n        dark: \"#4796FF\",\n      },\n    },\n    font: {\n      family: \"Helvetica\",\n    },\n    active: {\n      background: \"active-background\",\n      color: \"active-text\",\n    },\n    hover: {\n      background: \"active-background\",\n      color: \"active-text\",\n    },\n    selected: {\n      background: \"selected-background\",\n      color: \"selected-text\",\n    },\n  },\n  layer: {\n    background: {\n      dark: \"#111111\",\n      light: \"#FFFFFF\",\n    },\n  },\n  tip: {\n    content: {\n      background: colors.neutral100,\n    },\n  },\n});\n","import React from \"react\";\nimport { Box, Grid, Grommet, Heading, Main } from \"grommet\";\nimport styled from \"styled-components\";\nimport PCFooter from \"./components/Footer\";\nimport { Header } from \"./components/Header\";\nimport { History } from \"./components/History\";\nimport { Password } from \"./components/Password\";\nimport { genTheme } from \"./theme\";\nimport { ThemeMode } from \"./types\";\n\nconst BorderHeading = styled(Heading)`\n  text-transform: uppercase;\n`;\n\nfunction App() {\n  const [history, setHistory] = React.useState([] as string[]);\n\n  const startTheme = (localStorage.getItem(\"themeMode\") ||\n    \"light\") as ThemeMode;\n  const [theme, setTheme] = React.useState<ThemeMode>(startTheme);\n\n  const onNewPassword = (newPassword: string) => {\n    setHistory([newPassword, ...history]);\n  };\n\n  return (\n    <Grommet theme={genTheme} full themeMode={theme}>\n      <Grid fill rows={[\"auto\", \"flex\", \"auto\"]}>\n        <Header onThemeChange={setTheme} />\n\n        <Main\n          pad=\"medium\"\n          align=\"center\"\n          background={{\n            image: `url(${process.env.PUBLIC_URL}/bg_pattern_${theme}.png)`,\n            repeat: \"repeat\",\n            size: \"xsmall\",\n          }}\n        >\n          <Box fill width={{ max: \"large\" }}>\n            <Grid alignContent=\"center\" rows={[\"auto\", \"fill\", \"auto\"]}>\n              <BorderHeading margin=\"medium\" textAlign=\"center\">\n                Password Custard\n              </BorderHeading>\n              <Password onPasswordGenerated={onNewPassword} />\n              <History passwords={history} />\n            </Grid>\n          </Box>\n        </Main>\n        <PCFooter />\n      </Grid>\n    </Grommet>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createGlobalStyle } from \"styled-components\";\n\nconst ResetStyles = createGlobalStyle`\n  html, body {\n    margin: 0;\n    padding: 0;\n    height: 100%;\n    width: 100%;\n    background: black;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <ResetStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}